buildscript {
    apply from: 'components.gradle'

    repositories {
        jcenter()      // for license plugin
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

group = 'org.jetbrains.xodus'
version = hasProperty('xodusVersion') ? project.xodusVersion : ''
def isSnapshot = version.endsWith('SNAPSHOT')
def mavenPublishUrl = hasProperty('mavenPublishUrl') ? project.mavenPublishUrl : 'http://repository.jetbrains.com/xodus'
def mavenPublishUsername = hasProperty('mavenPublishUsername') ? project.mavenPublishUsername : 'xodus'
def mavenPublishPassword = hasProperty('mavenPublishPassword') ? project.mavenPublishPassword : ''
def signingKeyId = hasProperty('signingKeyId') ? project.signingKeyId : ''
def signingPassword = hasProperty('signingPassword') ? project.signingPassword : ''
def signingSecretKeyRingFile = hasProperty('signingSecretKeyRingFile') ? project.signingSecretKeyRingFile : ''

def shouldDeploy(project) {
    return project.version.length() > 0 && !(project.name in ['benchmarks', 'benchmarks-jmh', 'console', 'samples', 'sshd'])
}

subprojects {
    apply plugin: 'license'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'idea'

    sourceCompatibility = 1.7
    compileJava.options.encoding = 'UTF-8'
    group = rootProject.group
    version = rootProject.version
    archivesBaseName = rootProject.name + '-' + project.name

    license {
        header rootProject.file('license/copyright.ftl')
        strictCheck true
        ext.inceptionYear = 2010
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.owner = 'JetBrains s.r.o.'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName, 'Implementation-Version': version
        }
    }

    test {
        minHeapSize = '1g'
        maxHeapSize = '1g'
        //jvmArgs = ['-ea', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=2808']
        testLogging.showStandardStreams = true
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    // work around for Java 8 javadoc which is too strict
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from project.sourceSets.main.java
    }

    artifacts {
        archives jar, javadocJar, sourceJar
    }

    if (!isSnapshot) {
        ext.'signing.keyId' = signingKeyId
        ext.'signing.password' = signingPassword
        ext.'signing.secretKeyRingFile' = signingSecretKeyRingFile
    }

    afterEvaluate { project ->
        if (shouldDeploy(project)) {
            uploadArchives {
                repositories {
                    mavenDeployer {

                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        repository(url: mavenPublishUrl) {
                            authentication(userName: mavenPublishUsername, password: mavenPublishPassword)
                        }

                        pom.project {
                            name 'Xodus'
                            description 'Xodus is pure Java transactional schema-less embedded database'
                            packaging 'jar'
                            url 'http://jetbrains.github.io/xodus'

                            scm {
                                url 'https://github.com/JetBrains/xodus'
                                connection 'scm:git:https://github.com/JetBrains/xodus.git'
                                developerConnection 'scm:git:https://github.com/JetBrains/xodus.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache Software License, Version 2.0'
                                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'JetBrains'
                                    name 'JetBrains Team'
                                    organization 'JetBrains s.r.o'
                                    organizationUrl 'http://www.jetbrains.com'
                                }
                            }
                        }
                    }
                }
            }
            signing {
                required { !isSnapshot && gradle.taskGraph.hasTask('uploadArchives') }
                sign configurations.archives
            }
        }
    }
}